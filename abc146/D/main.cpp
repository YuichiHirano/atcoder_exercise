#include <bits/stdc++.h>
#include <tgmath.h>

using namespace std;

struct edge{
    int from;
    int to;
    int color;
};

vector<vector<edge>> edges;

void solve(long long N, std::vector<long long> a, std::vector<long long> b){
    
     
    int maxNum = 0;
    for(long long i=0;i<N;i++){
        int size = edges[i].size();
        maxNum = max(maxNum,size);
    }
    queue<edge> que;
    que.push(edge{edges[0][0].from,edges[0][0].to,1});
    while(!que.empty()){
        
    }

    for(int i= 0;i<N-1;i++){
        cout << edges[a[i]][b[i]].color << endl;
    }
    


}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    edges.resize(N);

    std::vector<long long> a(N-1);
    std::vector<long long> b(N-1);
    for(int i = 0 ; i < N-1 ; i++){
        long long c,d;
        cin >> c >> d;
        c--;
        d--;
        a[i] = c;
        b[i] = d;
        edges[c].emplace_back((edge){c,d,-1});
        edges[d].emplace_back((edge){d,c,-1});
    }
    solve(N, std::move(a), std::move(b));
    return 0;
}
